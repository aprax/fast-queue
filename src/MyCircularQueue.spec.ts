/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable max-len */
import formatValue from "./formatValue";
import MyCircularQueue from "./MyCircularQueue";

it("should pass test case 8", () => {
  const commands = [
    "MyCircularQueue",
    "enQueue",
    "enQueue",
    "deQueue",
    "enQueue",
    "deQueue",
    "enQueue",
    "deQueue",
    "enQueue",
    "deQueue",
    "Front",
  ];
  const args = [[2], [1], [2], [], [3], [], [3], [], [3], [], []];
  const expected = [
    null,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    true,
    3,
  ];

  const queue = new MyCircularQueue(args[0][0]);
  for (let x = 1; x < commands.length; x++) {
    /* @ts-ignore*/
    const actual = queue[commands[x]](args[x][0]);
    expect(actual).toBe(expected[x]);
  }
});

it("should pass test case 18", () => {
  const start = 1;
  let commands = [
    "MyCircularQueue",
    "enQueue",
    "deQueue",
    "enQueue",
    "enQueue",
    "deQueue",
    "isFull",
    "isFull",
    "Front",
    "deQueue",
    "enQueue",
    "Front",
    "enQueue",
    "enQueue",
    "Rear",
    "Rear",
    "deQueue",
    "enQueue",
    "enQueue",
    "Rear",
    "Rear",
    "Front",
    "Rear",
    "Rear",
    "deQueue",
    "enQueue",
    "Rear",
    "deQueue",
    "Rear",
    "Rear",
    "Front",
    "Front",
    "enQueue",
    "enQueue",
    "Front",
    "enQueue",
    "enQueue",
    "enQueue",
    "Front",
    "isEmpty",
    "enQueue",
    "Rear",
    "enQueue",
    "Front",
    "enQueue",
    "enQueue",
    "Front",
    "enQueue",
    "deQueue",
    "deQueue",
    "enQueue",
    "deQueue",
    "Front",
    "enQueue",
    "Rear",
    "isEmpty",
    "Front",
    "enQueue",
    "Front",
    "deQueue",
    "enQueue",
    "enQueue",
    "deQueue",
    "deQueue",
    "Front",
    "Front",
    "deQueue",
    "isEmpty",
    "enQueue",
    "Rear",
    "Front",
    "enQueue",
    "isEmpty",
    "Front",
    "Front",
    "enQueue",
    "enQueue",
    "enQueue",
    "Rear",
    "Front",
    "Front",
    "enQueue",
    "isEmpty",
    "deQueue",
    "enQueue",
    "enQueue",
    "Rear",
    "deQueue",
    "Rear",
    "Front",
    "enQueue",
    "deQueue",
    "Rear",
    "Front",
    "Rear",
    "deQueue",
    "Rear",
    "Rear",
    "enQueue",
    "enQueue",
    "Rear",
    "enQueue",
  ];
  const end = commands.length;
  commands = commands.slice(0, end);
  let args = [
    [81],
    [69],
    [],
    [92],
    [12],
    [],
    [],
    [],
    [],
    [],
    [28],
    [],
    [13],
    [45],
    [],
    [],
    [],
    [24],
    [27],
    [],
    [],
    [],
    [],
    [],
    [],
    [88],
    [],
    [],
    [],
    [],
    [],
    [],
    [53],
    [39],
    [],
    [28],
    [66],
    [17],
    [],
    [],
    [47],
    [],
    [87],
    [],
    [92],
    [94],
    [],
    [59],
    [],
    [],
    [99],
    [],
    [],
    [84],
    [],
    [],
    [],
    [52],
    [],
    [],
    [86],
    [30],
    [],
    [],
    [],
    [],
    [],
    [],
    [45],
    [],
    [],
    [83],
    [],
    [],
    [],
    [22],
    [77],
    [23],
    [],
    [],
    [],
    [14],
    [],
    [],
    [90],
    [57],
    [],
    [],
    [],
    [],
    [34],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [49],
    [59],
    [],
    [71],
  ];

  args = args.slice(0, end);

  let expected = [
    null,
    true,
    true,
    true,
    true,
    true,
    false,
    false,
    12,
    true,
    true,
    28,
    true,
    true,
    45,
    45,
    true,
    true,
    true,
    27,
    27,
    13,
    27,
    27,
    true,
    true,
    88,
    true,
    88,
    88,
    24,
    24,
    true,
    true,
    24,
    true,
    true,
    true,
    24,
    false,
    true,
    47,
    true,
    24,
    true,
    true,
    24,
    true,
    true,
    true,
    true,
    true,
    53,
    true,
    84,
    false,
    53,
    true,
    53,
    true,
    true,
    true,
    true,
    true,
    66,
    66,
    true,
    false,
    true,
    45,
    17,
    true,
    false,
    17,
    17,
    true,
    true,
    true,
    23,
    17,
    17,
    true,
    false,
    true,
    true,
    true,
    57,
    true,
    57,
    87,
    true,
    true,
    34,
    92,
    34,
    true,
    34,
    34,
    true,
    true,
    59,
    true,
  ];
  expected = expected.slice();

  const queue = new MyCircularQueue(args[0][0]);
  for (let x = start; x < end; x++) {
    let formatted;
    switch (commands[x]) {
      case "enQueue":
        formatted = formatValue(commands[x], 32);
        break;
      case "deQueue":
        formatted = formatValue(
          `${commands[x]}- deleting ${queue.firstPtr?.[0]}`,
          31
        );
        break;
    }
    if (formatted) {
      // console.log(`x: ${formatValue(x.toString(), undefined, 103)} - ${formatted}(${args[x][0] ?? ''}) ${queue.toString()}`);
    }
    /* @ts-ignore*/
    const actual = queue[commands[x]](args[x][0]);
    expect(actual).toBe(expected[x]);
  }
});
